// <auto-generated />
using System;
using API.Persistence.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Code.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191013151431_Idea Post")]
    partial class IdeaPost
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("API.Core.Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<Guid>("IdeaPostId");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<Guid>("ProblemBetaId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaPostId");

                    b.HasIndex("ProblemBetaId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Defaults.Country", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(5);

                    b.Property<string>("SortName")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Defaults.State", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Idea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<Guid>("IdeaPostId");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<Guid>("ProblemBetaId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaPostId");

                    b.HasIndex("ProblemBetaId");

                    b.HasIndex("UserId");

                    b.ToTable("Idea");
                });

            modelBuilder.Entity("API.Core.Domain.Models.IdeaPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Eco");

                    b.Property<string>("EcoUn");

                    b.Property<string>("EcoUnOther");

                    b.Property<string>("Ico");

                    b.Property<string>("IcoOther");

                    b.Property<int?>("StateId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("IdeaPosts");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Likes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IdeaPostId");

                    b.Property<Guid>("ProblemBetaId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaPostId");

                    b.HasIndex("ProblemBetaId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Core.Domain.Models.PersonalDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalDetail");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<Guid>("IdeaPostId");

                    b.Property<Guid>("ProblemBetaId");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("IdeaPostId");

                    b.HasIndex("ProblemBetaId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Core.Domain.Models.ProblemBeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(1000);

                    b.Property<string>("Eco")
                        .HasMaxLength(50);

                    b.Property<string>("EcoUn")
                        .HasMaxLength(50);

                    b.Property<string>("EcoUnOther")
                        .HasMaxLength(500);

                    b.Property<string>("Ico")
                        .HasMaxLength(50);

                    b.Property<string>("IcoOther")
                        .HasMaxLength(500);

                    b.Property<int?>("StateId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("ProblemBeta");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(3000);

                    b.Property<Guid?>("IdeaPostId");

                    b.Property<Guid?>("ProblemBetaId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<Guid>("UserId");

                    b.Property<string>("WebLink");

                    b.HasKey("Id");

                    b.HasIndex("IdeaPostId");

                    b.HasIndex("ProblemBetaId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("API.Core.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("AgreeToTermsAndCondition")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("API.Core.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("RoleId1");

                    b.Property<Guid?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Comment", b =>
                {
                    b.HasOne("API.Core.Domain.Models.IdeaPost", "IdeaPost")
                        .WithMany("Comments")
                        .HasForeignKey("IdeaPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.ProblemBeta", "ProblemBeta")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemBetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.Defaults.State", b =>
                {
                    b.HasOne("API.Core.Domain.Models.Defaults.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.Idea", b =>
                {
                    b.HasOne("API.Core.Domain.Models.IdeaPost", "IdeaPost")
                        .WithMany("Ideas")
                        .HasForeignKey("IdeaPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.ProblemBeta", "ProblemBeta")
                        .WithMany("Ideas")
                        .HasForeignKey("ProblemBetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.IdeaPost", b =>
                {
                    b.HasOne("API.Core.Domain.Models.Defaults.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("API.Core.Domain.Models.Defaults.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Core.Domain.Models.Likes", b =>
                {
                    b.HasOne("API.Core.Domain.Models.IdeaPost")
                        .WithMany("Likes")
                        .HasForeignKey("IdeaPostId");

                    b.HasOne("API.Core.Domain.Models.ProblemBeta", "ProblemBeta")
                        .WithMany("Likes")
                        .HasForeignKey("ProblemBetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.PersonalDetail", b =>
                {
                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithOne("PersonalDetail")
                        .HasForeignKey("API.Core.Domain.Models.PersonalDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.Photo", b =>
                {
                    b.HasOne("API.Core.Domain.Models.IdeaPost")
                        .WithMany("Photos")
                        .HasForeignKey("IdeaPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.ProblemBeta", "ProblemBeta")
                        .WithMany("Photos")
                        .HasForeignKey("ProblemBetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.ProblemBeta", b =>
                {
                    b.HasOne("API.Core.Domain.Models.Defaults.Country", "Country")
                        .WithMany("ProblemBetas")
                        .HasForeignKey("CountryId");

                    b.HasOne("API.Core.Domain.Models.Defaults.State", "State")
                        .WithMany("ProblemBetas")
                        .HasForeignKey("StateId");

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany("ProblemsBeta")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("API.Core.Domain.Models.Project", b =>
                {
                    b.HasOne("API.Core.Domain.Models.IdeaPost")
                        .WithMany("Projects")
                        .HasForeignKey("IdeaPostId");

                    b.HasOne("API.Core.Domain.Models.ProblemBeta")
                        .WithMany("Projects")
                        .HasForeignKey("ProblemBetaId");

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Core.Domain.Models.UserRole", b =>
                {
                    b.HasOne("API.Core.Domain.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("API.Core.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Core.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("API.Core.Domain.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("API.Core.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("API.Core.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("API.Core.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
